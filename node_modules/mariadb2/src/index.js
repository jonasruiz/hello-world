const commands = require('./commands')
const maria = require('mariadb')
const { EventEmitter } = require('events')
const Errors = require('./errors.js')


class Column {
  constructor(name, type, nullable, primaryKey) {
    if (typeof name !== "object") {
      this.name = name !== undefined ? name : () => { throw new Errors.MissingArgumentError(`the "name" argument must be passed to a column constructor`); return ""; }
      this.type = type !== undefined ? type : "TEXT"
      this.allowNull = nullable !== undefined ? nullable : false
      this.isPrimary = primaryKey !== undefined ? primaryKey : false
    } else {
      this.name = name.name !== undefined ? name.name : () => { throw new Errors.MissingArgumentError(`the "name" argument must be passed to a column constructor`); return ""; }
      this.type = name.type !== undefined ? name.type : "TEXT"
      this.allowNull = name.nullable !== undefined ? name.nullable : false
      this.isPrimary = name.primaryKey !== undefined ? name.primaryKey : false
    }
  }
}


class Client extends EventEmitter {
  constructor(conf, password, user, port, limit, host) {
    super()
    if (conf) {
      if (typeof conf === "object") {
        this.pool = new maria.createPool({
          user: conf.user !== undefined ? conf.user : "root",
          host: conf.host !== undefined ? conf.host : "localhost",
          database: conf.database !== undefined ? conf.database : () => { throw new Errors.MissingDatabaseError("you must provide a default Database to use this module") },
          password: conf.password !== undefined ? conf.password : () => { throw new Errors.MissingPasswordError("you must provide a password to use this module") },
          port: conf.port !== undefined ? conf.port : 3306,
          connectionLimit: conf.limit !== undefined ? conf.limit : 5
        })
      } else {
        this.pool = new maria.createPool({
          user: user !== undefined ? user : "root",
          host: host !== undefined ? host : "localhost",
          database: conf !== undefined ? conf : () => { throw new Errors.MissingDatabaseError("you must provide a default Database to use this module") },
          password: password !== undefined ? password : () => { throw new Errors.MissingPasswordError("you must provide a password to use this module") },
          port: port !== undefined ? port : 3306,
          connectionLimit: limit !== undefined ? limit : 5
        })
      }
    } else {
      throw new Errors.MissingPasswordError("you must provide a password to use this module")
    }

    this.query = (data, cb, cb2) => {
      if (typeof cb !== "function" && cb.forEach === undefined) {
        throw new Errors.InvalidCallbackError("callback must be a function")
      } else if (typeof cb.forEach === "function") {
        commands.query(data, cb, cb2, this)
      } else {
        commands.query(data, cb, undefined, this)
      }
    }
    //Looking through the source code? not a problem,
    //but please dont uncomment the two functions below,
    //unless you know what you are doing.
    //Regards,
    //The dev.
    this.createTable = (data, cb) => {
      if (typeof cb !== "function") {
        throw new Errors.InvalidCallbackError("callback must be a function")
      } else {
        commands.createTable(data, cb, this)
      }
    }
    this.dropTable = (data, cb) => {
      if (typeof cb !== "function") {
        throw new Errors.InvalidCallbackError("callback must be a function")
      } else {
        commands.dropTable(data, cb, this)
      }
    }

    this.columnGenerator = (inputArray) => {
      let processed = []
      for (let index = 0; index < inputArray.length; index += 1) {
        let item = inputArray[index];
        processed.push(new Column(item))
      }
      return processed;
    }


  }
}
module.exports = { Client, Column }
