module.exports = (query, cb, cb2, client, config) => {
  let start = Date.now()
  client.pool.getConnection().then(conn => {
    if (cb2 !== undefined) {
      conn.query(query, cb).then((dout) => {
        let columns = {}
        if (dout[0] !== undefined) {
          Object.keys(dout[0]).forEach(key => {
            columns[key] = { type: (typeof dout[0][key]) }
          })
        }
        let rows = []
        if (dout[0] !== undefined && dout[0] !== null) {
          dout.forEach(d => {
            rows.push(d)
          })
        }
        let toReturn = {
          rows,
          columns,
          rowCount: dout.length !== undefined ? dout.length : 0,
          columnCount: Object.keys(columns).length,
          timeTaken: (Date.now() - start) + "ms",
          didError: false,
          warnings: {}
        }
        if ((Date.now() - start) > 500) {
          toReturn.warnings.LatencyIssues = "Are you having issues with latency? this took longer than expected."
        }
        if (config) {
          if (config.noSQL) {

          } else {
            toReturn.SQL = query
          }
        } else {
          toReturn.SQL = query
        }
        conn.end()
        if (cb2 !== undefined) {
          cb2(null, toReturn)
        } else {
          cb(null, toReturn)
        }
      }).catch(err => {
        conn.end()
        let toReturn = {
          rows: [],
          columns: {},
          rowCount: 0,
          columnCount: 0,
          timeTaken: (Date.now() - start) + "ms",
          didError: true,
          warnings: { CommandFailed: "the query failed for some reason, see the error for more detailed information" },
          error: err
        }
        if ((Date.now() - start) > 500) {
          toReturn.warnings.LatencyIssues = "Are you having issues with latency? this took longer than expected."
        }
        if (cb2 !== undefined) {
          cb2(err, toReturn)
        } else {
          cb(err, toReturn)
        }
      })
    } else {
      conn.query(query).then((dout) => {
        let columns = {}
        if (dout[0] !== undefined) {
          Object.keys(dout[0]).forEach(key => {
            columns[key] = { type: (typeof dout[0][key]) }
          })
        }
        let rows = []
        if (dout[0] !== undefined && dout[0] !== null) {
          dout.forEach(d => {
            rows.push(d)
          })
        }
        let toReturn = {
          rows,
          columns,
          rowCount: dout.length !== undefined ? dout.length : 0,
          columnCount: Object.keys(columns).length,
          timeTaken: (Date.now() - start) + "ms",
          didError: false,
          warnings: {}
        }
        if ((Date.now() - start) > 500) {
          toReturn.warnings.LatencyIssues = "Are you having issues with latency? this took longer than expected."
        }
        if (config) {
          if (config.noSQL) {

          } else {
            toReturn.SQL = query
          }
        } else {
          toReturn.SQL = query
        }
        conn.end()
        if (cb2 !== undefined) {
          cb2(null, toReturn)
        } else {
          cb(null, toReturn)
        }
      }).catch(err => {
        conn.end()
        let toReturn = {
          rows: [],
          columns: {},
          rowCount: 0,
          columnCount: 0,
          timeTaken: (Date.now() - start) + "ms",
          didError: true,
          warnings: { CommandFailed: "the query failed for some reason, see the error for more detailed information" },
          error: err
        }
        if ((Date.now() - start) > 500) {
          toReturn.warnings.LatencyIssues = "Are you having issues with latency? this took longer than expected."
        }
        if (cb2 !== undefined) {
          cb2(err, toReturn)
        } else {
          cb(err, toReturn)
        }
      })
    }
  }).catch(err => {
    let toReturn = {
      rows: [],
      columns: {},
      rowCount: 0,
      columnCount: 0,
      timeTaken: (Date.now() - start) + "ms",
      didError: true,
      warnings: {
        CommandFailed: "The query failed because the connector ran out of valid query connections."
      },
      error: err
    }
    if (cb2 !== undefined) {
      cb2(err, toReturn)
    } else {
      cb(err, toReturn)
    }
  })
}
